%{
#include "parser.tab.h" /* Generated by Bison */
#include <stdlib.h>
#include <string.h>

#define YY_USER_ACTION \
    yylloc.first_line = yylloc.last_line = yylineno; \
    yylloc.first_column = yylloc.last_column; \
    yylloc.last_column += yyleng;

void yyerror(const char *msg);
%}

%option noyywrap
%option yylineno

DIGIT       [0-9]
INTEGER     -?{DIGIT}+
DECIMAL     -?{DIGIT}*\.{DIGIT}+
SCIENTIFIC  -?{DIGIT}+(\.{DIGIT}+)?[eE][+-]?{DIGIT}+
STRING      \"([^\"\\]|\\[\"\\\/bfnrt]|\\u[0-9a-fA-F]{4})*\"
WHITESPACE  [ \t\r\n]+

%%

"{"         { return LBRACE; }
"}"         { return RBRACE; }
"["         { return LBRACKET; }
"]"         { return RBRACKET; }
":"         { return COLON; }
","         { return COMMA; }
"true"      { yylval.ival = 1; return TRUE; }
"false"     { yylval.ival = 0; return FALSE; }
"null"      { return NULLVAL; }
{INTEGER}   { yylval.dval = atof(yytext); return NUMBER; }
{DECIMAL}   { yylval.dval = atof(yytext); return NUMBER; }
{SCIENTIFIC} { yylval.dval = atof(yytext); return NUMBER; }
{STRING}    {
    yylval.sval = strdup(yytext + 1); /* Skip opening quote */
    yylval.sval[strlen(yylval.sval) - 1] = '\0'; /* Remove closing quote */
    return STRING;
}
{WHITESPACE} { /* Ignore */ }
.           { yyerror("Invalid character"); return -1; }

%%

void yyerror(const char *msg) {
    fprintf(stderr, "Error: %s at line %d, column %d\n", msg, yylloc.first_line, yylloc.first_column);
}
